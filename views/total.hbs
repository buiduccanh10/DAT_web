<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        body {
    font-family: Arial, sans-serif;
}

.actions {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

.export-button {
    background-color: #34db85;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.export-button:hover {
    background-color: #2980b9;
}

.pagination {
    display: flex;
    gap: 10px;
}

.pagination-btn {
    background-color: #3498db;
    color: #fff;
    padding: 8px 12px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.pagination-btn:hover {
    background-color: #2980b9;
}

table {
    width: 100%;
    border-collapse: collapse;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

table th, table td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}



.image {
    height: 130px;
    width: 100px;
    object-fit: cover;
}

.status {
    color: red;
}

.spinner-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    display: none;
}

.spinner {
    border: 16px solid #f3f3f3;
    border-radius: 50%;
    border-top: 16px solid #3498db;
    width: 80px;
    height: 80px;
    animation: spin 1.5s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

    </style>
</head>
<body>
    {{#if total}}
    <div class="actions">
        <button class="export-button" onclick="exportToExcel()">Xuất Excel</button>
        <div class="pagination">
            <button class="pagination-btn" onclick="previousPage()">Previous</button>
            <button class="pagination-btn" onclick="nextPage()">Next</button>
        </div>
    </div>

    <table border="1" id="dataTable">
        <thead>
            <tr>
                <th>Ảnh</th>
                <th>Mã học viên</th>
                <th>Khoá học</th>
                <th>Họ tên</th>
                <th>Ngày sinh</th>
                <th>Giới tính</th>
                <th>Số CCCD</th>
                <th>Hạng lái xe</th>
                <th>Tổng thời gian B11</th>
                <th>Tổng quãng đường B11</th>
                <th>Tổng thời gian sáng</th>
                <th>Tổng thời gian tối</th>
                <th>Tổng quãng đường sáng</th>
                <th>Tổng quãng đường tối</th>
                <th>Tổng thời gian</th>
                <th>Tổng quãng đường</th>
                <th>Trạng thái</th>
                <th>Lý do</th>
                <th hidden>B1</th>
                <th hidden>B2</th>
                <th hidden>C</th>
                <th hidden>MaKhoaHoc</th>
            </tr>
        </thead>
        <tbody>
            {{#each total}}
            <tr>
                <td><img src="data:image/jpeg;base64,{{ this.Anh}}" class="image" alt="Ảnh"></td>
                <td>{{ this.MaHocVien}}</td>
                <td>{{ this.KhoaHoc}}</td>
                <td>{{ this.HoTen}}</td>
                <td>{{ this.NgaySinh}}</td>
                <td>{{ this.GioiTinh}}</td>
                <td>{{ this.SoCMT}}</td>
                <td>{{ this.Category}}</td>
                <td>{{ this.TongThoiGianXeSoTuDong}}</td>
                <td>{{ this.TongQuangDuongXeSoTuDong}}</td>
                <td>{{ this.TotalMorningTime}}</td>
                <td>{{ this.TotalEveningTime}}</td>
                <td>{{ this.TotalMorningDistance}}</td>
                <td>{{ this.TotalEveningDistance}}</td>
                <td>{{ this.TotalDuration}}</td>
                <td>{{ this.TotalDistance}}</td>
                {{#if this.TrangThai}}
                <td class="status">Bảo lưu</td>
                {{else}}
                <td>Đạt</td>
                {{/if}}
                <td>{{ this.LyDo}}</td>
                <td hidden>{{ this.B1}}</td>
                <td hidden>{{ this.B2}}</td>
                <td hidden>{{ this.C}}</td>
                <td hidden>{{ this.MaKhoaHoc}}</td>
            </tr>
            {{/each}}
        </tbody>
    </table>

    <div class="pagination">
            <button class="pagination-btn" onclick="previousPage()">Previous</button>
            <button class="pagination-btn" onclick="nextPage()">Next</button>
    </div>
    {{/if}}
    <div class="spinner-overlay" id="spinnerOverlay">
        <div class="spinner"></div>
    </div>
</body>
</html>


<script>
async function exportToExcel() {
            const table = document.getElementById("dataTable");
            const rows = Array.from(table.rows);

            // Group and organize data
            const dataByKhoaHoc = {};
            rows.slice(1).forEach(row => {
                const khoaHoc = row.cells[2].innerText;
                if (!dataByKhoaHoc[khoaHoc]) {
                    dataByKhoaHoc[khoaHoc] = [];
                }

                const fullName = row.cells[3].innerText;
                const parts = fullName.split(" ");
                // Assuming last name is the last part of the name
                const firstName = parts.pop();
                const lastName = parts.join(" ");

                dataByKhoaHoc[khoaHoc].push({
                    "Mã học viên": row.cells[1].innerText,
                    "Họ tên": fullName,
                    "Ngày sinh": row.cells[4].innerText,
                    "Giới tính": row.cells[5].innerText,
                    "Số CCCD": row.cells[6].innerText,
                    "Hạng lái xe": row.cells[7].innerText,
                    "Tổng thời gian": row.cells[14].innerText,
                    "Tổng quãng đường(km)": row.cells[15].innerText,
                    "Kết quả": row.cells[16].innerText === "Bảo lưu" ? "Không đạt" : "Đạt",
                    "B1": row.cells[18].innerText,
                    "B2": row.cells[19].innerText,
                    "C": row.cells[20].innerText,
                    "Mã khoá học":row.cells[21].innerText,
                });
            });

            // Sort each group by "Họ tên"
            for (const khoaHoc in dataByKhoaHoc) {
                dataByKhoaHoc[khoaHoc].sort((a, b) => {
                    const partsA = a["Họ tên"].split(" ");
                    const partsB = b["Họ tên"].split(" ");
                    const firstNameA = partsA.pop();
                    const firstNameB = partsB.pop();
                    return firstNameA.localeCompare(firstNameB);
                });
            }

            // Prompt user to provide filename and path for download
            const filename = prompt("Đặt tên tệp:", "example.xlsx");
            if (filename) {
                try {
                    const response = await fetch('/export-to-excel', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ dataByKhoaHoc, filename })
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    const blob = await response.blob();
                    const link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = filename;
                    link.click();
                } catch (error) {
                    console.error('Error exporting to Excel:', error);
                }
            }
        }

        const table = document.getElementById('dataTable');
        const pagination = document.getElementById('pagination');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');

        const rowsPerPage = 50;
        const rowCount = table.rows.length - 1; // Excluding the header row

        let totalPages = Math.ceil(rowCount / rowsPerPage);
        if (totalPages === 0) totalPages = 1;

        let currentPage = 1;

        function showPage(pageNumber) {
            currentPage = pageNumber;
            const startIndex = (pageNumber - 1) * rowsPerPage + 1;
            const endIndex = pageNumber * rowsPerPage;

            for (let i = 1; i <= rowCount; i++) {
                if (i >= startIndex && i <= endIndex) {
                    table.rows[i].style.display = '';
                } else {
                    table.rows[i].style.display = 'none';
                }
            }

            updatePaginationButtons();
        }

        function previousPage() {
            if (currentPage > 1) {
                showPage(currentPage - 1);
            }
        }

        function nextPage() {
            if (currentPage < totalPages) {
                showPage(currentPage + 1);
            }
        }

        function updatePaginationButtons() {
            prevBtn.disabled = currentPage === 1;
            nextBtn.disabled = currentPage === totalPages;
        }

        // Generate page numbers
        const pages = Array.from({ length: totalPages }, (_, i) => i + 1);

        console.log(pages)

        // Show the first page by default
        showPage(1);
    </script>
