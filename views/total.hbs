<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
    <script>
    function exportToExcel() {
        const table = document.getElementById("dataTable");
        const rows = Array.from(table.rows);

        // Group and organize data
        const dataByKhoaHoc = {};
        rows.slice(1).forEach(row => {
            const khoaHoc = row.cells[2].innerText;
            if (!dataByKhoaHoc[khoaHoc]) {
                dataByKhoaHoc[khoaHoc] = [];
            }

            const fullName = row.cells[3].innerText;
            const parts = fullName.split(" ");
            // Assuming last name is the last part of the name
            const firstName = parts.pop();
            const lastName = parts.join(" ");

            dataByKhoaHoc[khoaHoc].push({
                "Mã học viên": row.cells[1].innerText,
                "Họ tên": fullName,
                "Ngày sinh": row.cells[4].innerText,
                "Giới tính": row.cells[5].innerText,
                "Số CCCD": row.cells[6].innerText,
                "Hạng lái xe": row.cells[7].innerText,
                "Tổng thời gian": row.cells[14].innerText,
                "Tổng quãng đường(km)": row.cells[15].innerText,
                "Kết quả": row.cells[16].innerText === "Bảo lưu" ? "Không đạt" : "Đạt",
            });
        });

        // Sort each group by "Họ tên"
        for (const khoaHoc in dataByKhoaHoc) {
            dataByKhoaHoc[khoaHoc].sort((a, b) => {
                const partsA = a["Họ tên"].split(" ");
                const partsB = b["Họ tên"].split(" ");
                const firstNameA = partsA.pop();
                const firstNameB = partsB.pop();
                return firstNameA.localeCompare(firstNameB);
            });
        }

        // Prepare formatted data for export
        let exportData = [];
        for (const [khoaHoc, data] of Object.entries(dataByKhoaHoc)) {
            exportData.push([khoaHoc]); // Add header for each group
            exportData = exportData.concat(data); // Add sorted grouped data
        }

        // Convert data to worksheet and book
        const worksheet = XLSX.utils.json_to_sheet(exportData);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");

        // Prompt user to provide filename and path for download
        const filename = prompt("Đặt tên tệp:", "example.xlsx");
        if (filename) {
            XLSX.writeFile(workbook, filename);
        }
    }
</script>

</head>
<body>
    {{#if total}}
    <button class="w3-btn w3-green w3-border w3-border-green w3-round" onclick="exportToExcel()">Xuất Excel</button>

    <div id="pagination">
        <button onclick="previousPage()" id="prevBtn" disabled>Previous</button>
        {{#each pages}}
            <button onclick="showPage({{this}})">{{this}}</button>
        {{/each}}
        <button onclick="nextPage()" id="nextBtn">Next</button>
    </div>
    <table border="1" id="dataTable">
        <tr>
            <th>Ảnh</th>
            <th>Mã học viên</th>
            <th>Khoá học</th>
            <th>Họ tên</th>
            <th>Ngày sinh</th>
            <th>Giới tính</th>
            <th>Số CCCD</th>
            <th>Hạng lái xe</th>
            <th>Tổng thời gian B11</th>
            <th>Tổng quãng đường B11</th>
            <th>Tổng thời gian sáng</th>
            <th>Tổng thời gian tối</th>
            <th>Tổng quãng đường sáng</th>
            <th>Tổng quãng đường tối</th>
            <th>Tổng thời gian</th>
            <th>Tổng quãng đường</th>
            <th>Trạng thái</th>
            <th>Lý do</th>
        </tr>
        {{#each total}}
            <tr>
                <td><img src="data:image/jpeg;base64,{{ this.Anh}}" style="height: 130px; width:100px;" alt="Ảnh"></td>
                <td>{{ this.MaHocVien}}</td>
                <td>{{ this.KhoaHoc}}</td>
                <td>{{ this.HoTen}}</td>
                <td>{{ this.NgaySinh}}</td>
                <td>{{ this.GioiTinh}}</td>
                <td>{{ this.SoCMT}}</td>
                <td>{{ this.Category}}</td>
                <td>{{ this.TongThoiGianXeSoTuDong}}</td>
                <td>{{ this.TongQuangDuongXeSoTuDong}}</td>
                <td>{{ this.TotalMorningTime}}</td>
                <td>{{ this.TotalEveningTime}}</td>
                <td>{{ this.TotalMorningDistance}}</td>
                <td>{{ this.TotalEveningDistance}}</td>
                <td>{{ this.TotalDuration}}</td>
                <td>{{ this.TotalDistance}}</td>
                {{#if this.TrangThai}}
                    <td style="color: red;">Bảo lưu</td>
                {{else}}
                    <td>Đạt</td>
                {{/if}}
                <td>{{ this.LyDo}}</td>
            </tr>
        {{/each}}
    </table>
    {{/if}}
</body>
</html>

<script>
        const table = document.getElementById('dataTable');
        const pagination = document.getElementById('pagination');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');

        const rowsPerPage = 50;
        const rowCount = table.rows.length - 1; // Excluding the header row

        let totalPages = Math.ceil(rowCount / rowsPerPage);
        if (totalPages === 0) totalPages = 1;

        let currentPage = 1;

        function showPage(pageNumber) {
            currentPage = pageNumber;
            const startIndex = (pageNumber - 1) * rowsPerPage + 1;
            const endIndex = pageNumber * rowsPerPage;

            for (let i = 1; i <= rowCount; i++) {
                if (i >= startIndex && i <= endIndex) {
                    table.rows[i].style.display = '';
                } else {
                    table.rows[i].style.display = 'none';
                }
            }

            updatePaginationButtons();
        }

        function previousPage() {
            if (currentPage > 1) {
                showPage(currentPage - 1);
            }
        }

        function nextPage() {
            if (currentPage < totalPages) {
                showPage(currentPage + 1);
            }
        }

        function updatePaginationButtons() {
            prevBtn.disabled = currentPage === 1;
            nextBtn.disabled = currentPage === totalPages;
        }

        // Generate page numbers
        const pages = Array.from({ length: totalPages }, (_, i) => i + 1);

        console.log(pages)

        // Show the first page by default
        showPage(1);
    </script>
